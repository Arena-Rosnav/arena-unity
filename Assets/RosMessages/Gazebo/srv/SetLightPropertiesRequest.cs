//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Gazebo
{
    [Serializable]
    public class SetLightPropertiesRequest : Message
    {
        public const string k_RosMessageName = "gazebo_msgs/SetLightProperties";
        public override string RosMessageName => k_RosMessageName;

        public string light_name;
        //  name of Gazebo Light
        public bool cast_shadows;
        public Std.ColorRGBAMsg diffuse;
        //  diffuse color as red, green, blue, alpha
        public Std.ColorRGBAMsg specular;
        //  specular color as red, green, blue, alpha
        public double attenuation_constant;
        public double attenuation_linear;
        public double attenuation_quadratic;
        public Geometry.Vector3Msg direction;
        public Geometry.PoseMsg pose;
        //  pose in world frame

        public SetLightPropertiesRequest()
        {
            this.light_name = "";
            this.cast_shadows = false;
            this.diffuse = new Std.ColorRGBAMsg();
            this.specular = new Std.ColorRGBAMsg();
            this.attenuation_constant = 0.0;
            this.attenuation_linear = 0.0;
            this.attenuation_quadratic = 0.0;
            this.direction = new Geometry.Vector3Msg();
            this.pose = new Geometry.PoseMsg();
        }

        public SetLightPropertiesRequest(string light_name, bool cast_shadows, Std.ColorRGBAMsg diffuse, Std.ColorRGBAMsg specular, double attenuation_constant, double attenuation_linear, double attenuation_quadratic, Geometry.Vector3Msg direction, Geometry.PoseMsg pose)
        {
            this.light_name = light_name;
            this.cast_shadows = cast_shadows;
            this.diffuse = diffuse;
            this.specular = specular;
            this.attenuation_constant = attenuation_constant;
            this.attenuation_linear = attenuation_linear;
            this.attenuation_quadratic = attenuation_quadratic;
            this.direction = direction;
            this.pose = pose;
        }

        public static SetLightPropertiesRequest Deserialize(MessageDeserializer deserializer) => new SetLightPropertiesRequest(deserializer);

        private SetLightPropertiesRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.light_name);
            deserializer.Read(out this.cast_shadows);
            this.diffuse = Std.ColorRGBAMsg.Deserialize(deserializer);
            this.specular = Std.ColorRGBAMsg.Deserialize(deserializer);
            deserializer.Read(out this.attenuation_constant);
            deserializer.Read(out this.attenuation_linear);
            deserializer.Read(out this.attenuation_quadratic);
            this.direction = Geometry.Vector3Msg.Deserialize(deserializer);
            this.pose = Geometry.PoseMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.light_name);
            serializer.Write(this.cast_shadows);
            serializer.Write(this.diffuse);
            serializer.Write(this.specular);
            serializer.Write(this.attenuation_constant);
            serializer.Write(this.attenuation_linear);
            serializer.Write(this.attenuation_quadratic);
            serializer.Write(this.direction);
            serializer.Write(this.pose);
        }

        public override string ToString()
        {
            return "SetLightPropertiesRequest: " +
            "\nlight_name: " + light_name.ToString() +
            "\ncast_shadows: " + cast_shadows.ToString() +
            "\ndiffuse: " + diffuse.ToString() +
            "\nspecular: " + specular.ToString() +
            "\nattenuation_constant: " + attenuation_constant.ToString() +
            "\nattenuation_linear: " + attenuation_linear.ToString() +
            "\nattenuation_quadratic: " + attenuation_quadratic.ToString() +
            "\ndirection: " + direction.ToString() +
            "\npose: " + pose.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
