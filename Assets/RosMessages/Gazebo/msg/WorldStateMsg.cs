//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Gazebo
{
    [Serializable]
    public class WorldStateMsg : Message
    {
        public const string k_RosMessageName = "gazebo_msgs/WorldState";
        public override string RosMessageName => k_RosMessageName;

        //  This is a message that holds data necessary to reconstruct a snapshot of the world
        // 
        //  = Approach to Message Passing =
        //  The state of the world is defined by either
        //    1. Inertial Model pose, twist
        //       * kinematic data - connectivity graph from Model to each Link
        //       * joint angles
        //       * joint velocities
        //       * Applied forces - Body wrench
        //         * relative transform from Body to each collision Geom
        //  Or
        //    2. Inertial (absolute) Body pose, twist, wrench
        //       * relative transform from Body to each collision Geom - constant, so not sent over wire
        //       * back compute from canonical body info to get Model pose and twist.
        // 
        //  Chooing (2.) because it matches most physics engines out there
        //    and is simpler.
        // 
        //  = Future =
        //  Consider impacts on using reduced coordinates / graph (parent/child links) approach
        //    constraint and physics solvers.
        // 
        //  = Application =
        //  This message is used to do the following:
        //    * reconstruct the world and objects for sensor generation
        //    * stop / start simulation - need pose, twist, wrench of each body
        //    * collision detection - need pose of each collision geometry.  velocity/acceleration if
        // 
        //  = Assumptions =
        //  Assuming that each (physics) processor node locally already has
        //    * collision information - Trimesh for Geoms, etc
        //    * relative transforms from Body to Geom - this is assumed to be fixed, do not send oved wire
        //    * inertial information - does not vary in time
        //    * visual information - does not vary in time
        // 
        public HeaderMsg header;
        public string[] name;
        public Geometry.PoseMsg[] pose;
        public Geometry.TwistMsg[] twist;
        public Geometry.WrenchMsg[] wrench;

        public WorldStateMsg()
        {
            this.header = new HeaderMsg();
            this.name = new string[0];
            this.pose = new Geometry.PoseMsg[0];
            this.twist = new Geometry.TwistMsg[0];
            this.wrench = new Geometry.WrenchMsg[0];
        }

        public WorldStateMsg(HeaderMsg header, string[] name, Geometry.PoseMsg[] pose, Geometry.TwistMsg[] twist, Geometry.WrenchMsg[] wrench)
        {
            this.header = header;
            this.name = name;
            this.pose = pose;
            this.twist = twist;
            this.wrench = wrench;
        }

        public static WorldStateMsg Deserialize(MessageDeserializer deserializer) => new WorldStateMsg(deserializer);

        private WorldStateMsg(MessageDeserializer deserializer)
        {
            this.header = HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.name, deserializer.ReadLength());
            deserializer.Read(out this.pose, Geometry.PoseMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.twist, Geometry.TwistMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.wrench, Geometry.WrenchMsg.Deserialize, deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.WriteLength(this.name);
            serializer.Write(this.name);
            serializer.WriteLength(this.pose);
            serializer.Write(this.pose);
            serializer.WriteLength(this.twist);
            serializer.Write(this.twist);
            serializer.WriteLength(this.wrench);
            serializer.Write(this.wrench);
        }

        public override string ToString()
        {
            return "WorldStateMsg: " +
            "\nheader: " + header.ToString() +
            "\nname: " + System.String.Join(", ", name.ToList()) +
            "\npose: " + System.String.Join(", ", pose.ToList()) +
            "\ntwist: " + System.String.Join(", ", twist.ToList()) +
            "\nwrench: " + System.String.Join(", ", wrench.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
