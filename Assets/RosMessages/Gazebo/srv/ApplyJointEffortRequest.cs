//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.BuiltinInterfaces;

namespace RosMessageTypes.Gazebo
{
    [Serializable]
    public class ApplyJointEffortRequest : Message
    {
        public const string k_RosMessageName = "gazebo_msgs/ApplyJointEffort";
        public override string RosMessageName => k_RosMessageName;

        //  set urdf joint effort
        public string joint_name;
        //  joint to apply wrench (linear force and torque)
        public double effort;
        //  effort to apply
        public TimeMsg start_time;
        //  optional wrench application start time (seconds)
        //  if start_time < current time, start as soon as possible
        public DurationMsg duration;
        //  optional duration of wrench application time (seconds)
        //  if duration < 0, apply wrench continuously without end
        //  if duration = 0, do nothing
        //  if duration < step size, assume step size and
        //                display warning in status_message

        public ApplyJointEffortRequest()
        {
            this.joint_name = "";
            this.effort = 0.0;
            this.start_time = new TimeMsg();
            this.duration = new DurationMsg();
        }

        public ApplyJointEffortRequest(string joint_name, double effort, TimeMsg start_time, DurationMsg duration)
        {
            this.joint_name = joint_name;
            this.effort = effort;
            this.start_time = start_time;
            this.duration = duration;
        }

        public static ApplyJointEffortRequest Deserialize(MessageDeserializer deserializer) => new ApplyJointEffortRequest(deserializer);

        private ApplyJointEffortRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.joint_name);
            deserializer.Read(out this.effort);
            this.start_time = TimeMsg.Deserialize(deserializer);
            this.duration = DurationMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.joint_name);
            serializer.Write(this.effort);
            serializer.Write(this.start_time);
            serializer.Write(this.duration);
        }

        public override string ToString()
        {
            return "ApplyJointEffortRequest: " +
            "\njoint_name: " + joint_name.ToString() +
            "\neffort: " + effort.ToString() +
            "\nstart_time: " + start_time.ToString() +
            "\nduration: " + duration.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
